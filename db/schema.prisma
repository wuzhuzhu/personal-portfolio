// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

// https://blitzjs.com/docs/multitenancy
// The Organization is the "God" model which owns everything for an account
// An Organization has many Users through Membership
// Every other model in the system has an organizationId to indicate who owns it.
// A User can have access to multiple Organizations
// When assigning an entity to a user, like a task, assign the task to the user's Membership instead of directly to the user.
// must filter all your queries by organizationId to ensure one user cannot see another user's private data.

model Organization {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique

  memberships Membership[]
}

model Membership {
  id        String         @id @default(uuid())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  role      MembershipRole @default(USER)

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  user           User         @relation(fields: [userId], references: [id])
  userId         String

  @@unique([organizationId, userId])
}

model User {
  id             String     @id @default(uuid())
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  name           String?
  email          String     @unique
  hashedPassword String?
  role           GlobalRole @default(USER)

  memberships Membership[]

  tokens   Token[]
  sessions Session[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  // See note below about TokenType enum
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql

enum TokenType {
  RESET_PASSWORD
}

enum Role {
  USER
  ADMIN
  CREATOR
}

// The owners of the SaaS (you) can have a SUPERADMIN role to access all data

enum GlobalRole {
  SUPERADMIN
  USER
}

enum MembershipRole {
  OWNER
  ADMIN
  USER
  VISITOR
}

model Question {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text      String
}
